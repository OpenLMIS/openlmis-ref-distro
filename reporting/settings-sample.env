### NginX ###
# The virtual host for the nginx server - nginx will make services available under this host.
VIRTUAL_HOST=uat.openlmis.org
# For services (like NiFi) that need to be authenticated but currently don't, by themselves, authenticate users
# The password can be generated for a new instance
NGINX_BASIC_AUTH_USER=admin
NGINX_BASIC_AUTH_PW=changeme

### Source Database ###
# The database connection information for the source database (i.e. OpenLMIS v3).
# This is used by Debezium/Kafka Connect to sync data from OpenLMIS into the reporting database.
SRC_POSTGRES_HOST=olmis-db
SRC_POSTGRES_PORT=5432
SRC_POSTGRES_DB=open_lmis
SRC_POSTGRES_USER=postgres
SRC_POSTGRES_PASSWORD=p@ssw0rd

### Reporting Stack Database ###
# The database URL for the Reporting Stack database
DATABASE_URL=jdbc:postgresql://reporting-db:5432/open_lmis_reporting?stringtype=unspecified
# The database superadmin's username. Note: it should not be changed.
POSTGRES_USER=postgres
# The database password that services will use. It can be generated for a new instance
POSTGRES_PASSWORD=changeme

### Nifi Service ###
# InvokeHttp components of Nifi needs to be authorized by credentials of OpenLMIS UI
AUTH_SERVER_CLIENT_ID=user-client
AUTH_SERVER_CLIENT_SECRET=changeme
# InvokeHttp components of Nifi needs to specify trusted hostname
TRUSTED_HOSTNAME=uat.openlmis.org
# Nifi needs an OpenLMIS user which has all possible permissions
OL_ADMIN_USERNAME=administrator
OL_ADMIN_PASSWORD=password
# FHIR credentials (leave blank if not used)
FHIR_ID=trusted-client
FHIR_PASSWORD=secret

# The domain name to use for NiFi
NIFI_DOMAIN_NAME=nifi.local
# The name of the SSL certificate file in services/nginx/tls to use with the NiFi domain
NIFI_SSL_CERT=nifi.local.crt
# The name of the SSL key file in services/nginx/tls to use with the NiFi domain
NIFI_SSL_KEY=nifi.local.key
# The name of the SSL certificate chain file in services/nginx/tls to use with the NiFi domain
NIFI_SSL_CERT_CHAIN=nifi.local.crt
# Whether to enable accessing the NiFi domain securely
NIFI_ENABLE_SSL=false
# Whether Nifi is behind a load balancer
NIFI_BEHIND_LOAD_BALANCER=false
# Whether to redirect HTTP traffic on the load balancer to https
NIFI_LOAD_BALANCER_REDIRECT_HTTP=false

### Superset Service ###
# Superset will be configured with OpenLMIS instance under this URL
OL_BASE_URL=https://uat.openlmis.org
# Superset webapp credentials - there is the option to sing-in by them when OAUTH provider is disabled
# Note: Because there is currently no way to disable the OAuth provider,
# the corresponding SUPERSET_ADMIN_USERNAME and PASSWORD values are currently always ignored.
SUPERSET_ADMIN_USERNAME=admin
SUPERSET_ADMIN_PASSWORD=superset123
# Superset Postgres credentials
# The password can be generated for a new instance
SUPERSET_POSTGRES_USER=superset
SUPERSET_POSTGRES_PASSWORD=changeme
# Superset needs an OpenLMIS user which allows to sign-in via OAUTH
OL_SUPERSET_USER=superset
OL_SUPERSET_PASSWORD=changeme
# Secret key for flask in Superset. Can be generated for a new instance
SUPERSET_SECRET_KEY=changeme
# Disabling SSL check in Superset service. By default sign-in via OAUTH requires OpenLMIS with HTTPS security
# Note: Comment out this variable if you use it on production
# OAUTHLIB_INSECURE_TRANSPORT=1
#Add URL to your superset
SUPERSET_URL=

# The domain name to use for Superset
SUPERSET_DOMAIN_NAME=superset.local
# The name of the SSL certificate file in services/nginx/tls to use with the Superset domain
SUPERSET_SSL_CERT=superset.local.crt
# The name of the SSL key file in services/nginx/tls to use with the Superset domain
SUPERSET_SSL_KEY=superset.local.key
# The name of the SSL certificate chain file in services/nginx/tls to use with the Superset domain
SUPERSET_SSL_CERT_CHAIN=superset.local.crt
# Whether to enable accessing the Superset domain securely
SUPERSET_ENABLE_SSL=false
# Whether Superset is behind a load balancer
SUPERSET_BEHIND_LOAD_BALANCER=false
# Whether to redirect HTTP traffic on the load balancer to https
SUPERSET_LOAD_BALANCER_REDIRECT_HTTP=false

### Scalyr ###
# API key for scalyr service
SCALYR_API_KEY=
