version: "3.3"

services:
  config-container:
    command: >
      sh -c "while ! curl -f \"http://consul:8500/v1/agent/self\"; do sleep 10;done
      && curl -X PUT -H \"Content-Type: application/json\" --data '{\"name\": \"superset-service\", \"address\": \"superset\", \"id\": \"superset1\", \"port\": 8088, \"tags\": [\"openlmis-service\"], \"check\": { \"http\": \"http://superset:8088/login\", \"method\": \"GET\", \"interval\": \"30s\", \"timeout\": \"10s\"}}' http://consul:8500/v1/agent/service/register
      && curl -X PUT --data '{ \"upstream\": \"superset-service\", \"enable_basic_auth\": false, \"provide_certs\": ${SUPERSET_PROVIDE_CERTS}, \"enable_ssl\": ${SUPERSET_ENABLE_SSL}, \"ssl_cert\": \"/config/nginx/tls/${SUPERSET_SSL_CERT}\", \"ssl_key\": \"/config/nginx/tls/${SUPERSET_SSL_KEY}\", \"ssl_cert_chain\": \"/config/nginx/tls/${SUPERSET_SSL_CERT_CHAIN}\"}' http://consul:8500/v1/kv/resources/${SUPERSET_DOMAIN_NAME}
      && curl -X PUT -H \"Content-Type: application/json\" --data '{\"name\": \"nifi-service\", \"address\": \"nifi\", \"id\": \"nifi1\", \"port\": 8080, \"tags\": [\"openlmis-service\"], \"check\": { \"http\": \"http://nifi:8080\", \"method\": \"GET\", \"interval\": \"30s\", \"timeout\": \"10s\"}}' http://consul:8500/v1/agent/service/register
      && curl -X PUT --data '{ \"upstream\": \"nifi-service\", \"enable_basic_auth\": true, \"provide_certs\": ${NIFI_PROVIDE_CERTS}, \"enable_ssl\": ${NIFI_ENABLE_SSL}, \"ssl_cert\": \"/config/nginx/tls/${NIFI_SSL_CERT}\", \"ssl_key\": \"/config/nginx/tls/${NIFI_SSL_KEY}\", \"ssl_cert_chain\": \"/config/nginx/tls/${NIFI_SSL_CERT_CHAIN}\"}' http://consul:8500/v1/kv/resources/${NIFI_DOMAIN_NAME}"
    build:
      context: ./config
    volumes:
      - config-volume:/config

  scalyr:
    image: openlmis/scalyr
    env_file: ../settings.env
    volumes:
      - config-volume:/config
      - ${SCALYR_DOCKER_SOCK}:/var/scalyr/docker.sock
      - syslog:/var/log/reporting

  log:
    image: openlmis/rsyslog:${OL_RSYSLOG_VERSION}
    volumes:
      - syslog:/var/log
    ports:
      - "${SYSLOG_UDP_PORT}:514/udp"

  consul:
    command: -server -bootstrap
    image: gliderlabs/consul-server
    ports:
      - "8501:8500"
    logging:
      driver: syslog
      options:
        syslog-address: "udp://127.0.0.1:${SYSLOG_UDP_PORT}"
    depends_on: [log]

  nginx:
    image: openlmis/nginx:${OL_NGINX_VERSION}
    ports:
      - "${OL_HTTP_PORT:-80}:80"
      - "${OL_HTTPS_PORT:-443}:443"
    env_file: ../settings.env
    environment:
      NGINX_LOG_DIR: '/var/log/nginx/log'
    volumes:
      - config-volume:/config
    entrypoint: >
      sh -c "openssl dhparam -dsaparam -out /etc/ssl/certs/dhparam.pem 4096
      && cp -r /config/nginx/consul-template/* /etc/consul-template/
      && echo -n '$NGINX_BASIC_AUTH_USER:' >> /etc/nginx/.htpasswd
      && openssl passwd -apr1 $NGINX_BASIC_AUTH_PW >> /etc/nginx/.htpasswd
      && sleep 120
      && /home/run.sh"
    logging:
      driver: syslog
      options:
        syslog-address: "udp://127.0.0.1:${SYSLOG_UDP_PORT}"
    depends_on: [consul, log, config-container]

  nifi:
    image: onaio/nifi:${OL_NIFI_VERSION}
    volumes:
      - config-volume:/config
      - ./nifi-cache:/tmp/nifi-docker-cache
    entrypoint: >
      bash -c "/config/nifi/scripts/start.sh ${OL_NIFI_VERSION} ${DB_PASSWORD} ${INVOKEHTTP_PASSWORD}"
    environment:
      - NIFI_JVM_HEAP_MAX=${NIFI_JVM_HEAP_MAX}
    logging:
      driver: syslog
      options:
        syslog-address: "udp://127.0.0.1:${SYSLOG_UDP_PORT}"
    depends_on: [log, config-container, nginx]

  db-config-container:
    build:
      context: ./db
    volumes:
      - db-config-volume:/docker-entrypoint-initdb.d

  db:
    image: openlmis/postgres:${OL_POSTGRES_VERSION}
    env_file: ../settings.env
    volumes:
        - db-config-volume:/docker-entrypoint-initdb.d
        - dbdata:/var/lib/postgresql/data
    environment:
      - SUPERSET_POSTGRES_USER=${SUPERSET_POSTGRES_USER}
      - SUPERSET_POSTGRES_PASSWORD=${SUPERSET_POSTGRES_PASSWORD}
    logging:
      driver: syslog
      options:
        syslog-address: "udp://127.0.0.1:${SYSLOG_UDP_PORT}"
    depends_on: [log, consul, db-config-container]

  zookeeper:
    image: confluentinc/cp-zookeeper:${OL_ZOOKEEPER_VERSION}
    environment:
      - ZOOKEEPER_CLIENT_PORT=32181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SYNC_LIMIT=2
    logging:
      driver: syslog
      options:
        syslog-address: "udp://127.0.0.1:${SYSLOG_UDP_PORT}"
    depends_on: [log]

  kafka:
    image: confluentinc/cp-kafka:${OL_KAFKA_VERSION}
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:32181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092
      - KAFKA_BROKER_ID=2
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_LOG_CLEANER_ENABLE=true
    volumes:
      - config-volume:/config
    entrypoint: >
      bash -c "/config/kafka/start.sh"
    logging:
      driver: syslog
      options:
        syslog-address: "udp://127.0.0.1:${SYSLOG_UDP_PORT}"
    depends_on: [log, config-container, zookeeper]

  superset:
    build:
      context: ./superset
    volumes:
      - config-volume:/config
    command: >
        bash -c "cp -r /config/superset /etc/
        && sleep 30 && fabmanager create-admin --app superset --username ${SUPERSET_ADMIN_USERNAME} --firstname Admin --lastname Admin --email noreply --password ${SUPERSET_ADMIN_PASSWORD}
        && superset db upgrade
        && superset import_datasources -p /etc/superset/datasources/database.yaml
        && superset import_dashboards -p /etc/superset/dashboards/openlmis_uat_dashboards.json
        && superset init && gunicorn -w 2 --timeout 60 -b 0.0.0.0:8088 --reload --limit-request-line 0 --limit-request-field_size 0 superset:app"
    logging:
      driver: syslog
      options:
        syslog-address: "udp://127.0.0.1:${SYSLOG_UDP_PORT}"
    depends_on: [db, config-container, nginx]

volumes:
  syslog:
    external: false
  config-volume:
    external: false
  db-config-volume:
    external: false
  dbdata:
    external: false