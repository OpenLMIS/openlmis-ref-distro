{
    "name": "source-referencedata",
    "config": {
      "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
      "tasks.max": "1",
      "plugin.name": "wal2json",
      "database.hostname": "olmis-db",
      "database.port": "5432",
      "database.user": "postgres",
      "database.password": "p@ssw0rd",
      "database.dbname": "open_lmis",
      "database.server.name": "openlmis",
      "table.whitelist": "public\\.debezium_heartbeat,referencedata\\.commodity_types,referencedata\\.geographic_levels,referencedata\\.geographic_zones,referencedata\\.facility_operators,referencedata\\.facility_types,referencedata\\.facilities,referencedata\\.ideal_stock_amounts,referencedata\\.lots,referencedata\\.orderable_identifiers,referencedata\\.orderables,referencedata\\.processing_periods,referencedata\\.processing_schedules,referencedata\\.program_orderables,referencedata\\.programs,referencedata\\.requisition_group_members,referencedata\\.requisition_group_program_schedules,referencedata\\.supported_programs,referencedata\\.trade_items,referencedata\\.rights,referencedata\\.users,referencedata\\.roles,referencedata\\.supervisory_nodes,referencedata\\.requisition_groups,referencedata\\.supply_lines,referencedata\\.right_assignments",
      "database.history.kafka.bootstrap.servers": "kafka:29092",
      "database.history.kafka.topic": "openlmis",
      "column.blacklist": "referencedata.facilities.location,referencedata.geographic_zones.boundary",
      "slot.name": "dbz_referencedata",
      "time.precision.mode": "connect",
      "heartbeat.interval.ms": 3000,
      "heartbeat.action.query": "CREATE TABLE IF NOT EXISTS debezium_heartbeat (id SERIAL PRIMARY KEY, ts TIMESTAMPTZ); INSERT INTO debezium_heartbeat (id, ts) VALUES (1, NOW()) ON CONFLICT(id) DO UPDATE SET ts=NOW();",
      "transforms": "unwrap,route",
      "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
      "transforms.unwrap.drop.tombstones": "false",
      "transforms.unwrap.delete.handling.mode": "none",
      "transforms.route.type": "org.apache.kafka.connect.transforms.RegexRouter",
      "transforms.route.regex": "([^.]+)\\.([^.]+)\\.([^.]+)",
      "transforms.route.replacement": "public.kafka_$3"
    }
  }
